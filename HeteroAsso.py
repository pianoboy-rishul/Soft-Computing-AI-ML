##...RISHUL GHOSH...##
##...N230...##

print("...HETERO-ASSOCIATIVE NETWORK...")
print("___________________________________________")
import numpy as np
InputMatrix1 = np.array([[1],[0],[0],[0]])
InputMatrix2 = np.array([[1],[1],[0],[0]])
InputMatrix3 = np.array([[0],[0],[0],[1]])
InputMatrix4 = np.array([[0],[0],[1],[1]])
Transpose1 = np.transpose(InputMatrix1)
Transpose2 = np.transpose(InputMatrix2)
Transpose3 = np.transpose(InputMatrix3)
Transpose4 = np.transpose(InputMatrix4)
TargetMatrix1 = np.array([[0],[1]])
TargetTranspose1 = np.transpose(TargetMatrix1)
TargetMatrix2 = np.array([[0],[1]])
TargetTranspose2 = np.transpose(TargetMatrix2)
TargetMatrix3 = np.array([[1],[0]])
TargetTranspose3 = np.transpose(TargetMatrix3)
TargetMatrix4 = np.array([[1],[0]])
TargetTranspose4 = np.transpose(TargetMatrix4)
print("GIVEN (S1,S2,S3,S4):")
print("Input 1: ",Transpose1)
print("Input 2: ",Transpose2)
print("Input 3: ",Transpose3)
print("Input 4: ",Transpose4)
print("TRANSPOSED (S1,S2,S3,S4):")
print("Input 1: ")
print(InputMatrix1)
print("Input 2: ")
print(InputMatrix2)
print("Input 3: ")
print(InputMatrix3)
print("Input 4: ")
print(InputMatrix4)
print("GIVEN (T1. T2):")
print("Input 1: ",TargetTranspose1)
print("Input 2: ",TargetTranspose2)
print("Input 3: ",TargetTranspose3)
print("Input 4: ",TargetTranspose4)
print("___________________________________________")
print("CALCULATING Wij:")
W1 = np.dot(InputMatrix1,TargetTranspose1)
W2 = np.dot(InputMatrix2,TargetTranspose2)
W3 = np.dot(InputMatrix3,TargetTranspose3)
W4 = np.dot(InputMatrix4,TargetTranspose4)
print("W1: ")
print(W1)
print("W2: ")
print(W2)
print("W3: ")
print(W3)
print("W4: ")
print(W4)
print("___________________________________________")
print("CALCULATING W")
W = W1+W2+W3+W4
print("W:");
print(W)
print("___________________________________________")
print("TESTING THE ALGORITHM")
print("For Input 1: ");
Yin1add1 = (Transpose1[0][0]*W[0][0])+(Transpose1[0][1]*W[1][0])+(Transpose1[0][2]*W[2][0])+(Transpose1[0][3]*W[3][0])
print("Yin1 = ",Yin1add1)
Yin1add2 = (Transpose1[0][0]*W[0][1])+(Transpose1[0][1]*W[1][1])+(Transpose1[0][2]*W[2][1])+(Transpose1[0][3]*W[3][1])
print("Yin2 = ",Yin1add2)
print("For Input 1: ");
Yin1add3 = (Transpose2[0][0]*W[0][0])+(Transpose2[0][1]*W[1][0])+(Transpose2[0][2]*W[2][0])+(Transpose2[0][3]*W[3][0])
print("Yin1 = ",Yin1add3)
Yin1add4 = (Transpose2[0][0]*W[0][1])+(Transpose2[0][1]*W[1][1])+(Transpose2[0][2]*W[2][1])+(Transpose2[0][3]*W[3][1])
print("Yin2 = ",Yin1add4)
print("For Input 1: ");
Yin1add5 = (Transpose3[0][0]*W[0][0])+(Transpose3[0][1]*W[1][0])+(Transpose3[0][2]*W[2][0])+(Transpose3[0][3]*W[3][0])
print("Yin1 = ",Yin1add5)
Yin1add6 = (Transpose3[0][0]*W[0][1])+(Transpose3[0][1]*W[1][1])+(Transpose3[0][2]*W[2][1])+(Transpose3[0][3]*W[3][1])
print("Yin2 = ",Yin1add6)
print("For Input 1: ");
Yin1add7 = (Transpose4[0][0]*W[0][0])+(Transpose4[0][1]*W[1][0])+(Transpose4[0][2]*W[2][0])+(Transpose4[0][3]*W[3][0])
print("Yin1 = ",Yin1add7)
Yin1add8 = (Transpose4[0][0]*W[0][1])+(Transpose4[0][1]*W[1][1])+(Transpose4[0][2]*W[2][1])+(Transpose4[0][3]*W[3][1])
print("Yin2 = ",Yin1add8)
print("___________________________________________")
print("CALCULATE ACTIVATION FUNCTIONS AS FOLLOWS: ")
print("Let threshold = 0.2")
print("if Yin>Threshold ; F(Yin) = 1")
print("if Yin=Threshold ; F(Yin) = 0")
print("if Yin<Threshold ; F(Yin) = -1")
print("If F(Yin) matrix = Target matrix, then response is correct")
print("__________________________________________________________")
